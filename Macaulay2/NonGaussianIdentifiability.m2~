paramoment = (n, k, edges, idpar,hidnodes) -> (
    list2 = flatten for i to n-1 list for j from i to n-1 list (i,j);
    list3 = flatten flatten for i to n-1 list for j from i to n-1 list for k from j to n-1 list (i,j,k);
    R = QQ[l_(0,0)..l_(n-1,n-1), apply(list2,i->s_i),apply(list3,i->t_i)];
    L = mutableIdentity(R, n);
    for e in edges do (
	L_e = -l_e;
	);
    L = matrix(L);
    L =  substitute(L, R);
    use R;
    S = matrix( apply(n, i -> apply(n, j -> if (i < j) then s_(i,j) else s_(j,i))));
    W = (transpose L)*S*L;
    equationList = flatten for i to n-1 list for j from i+1 to n-1 list W_(i,j);
    for i from 0 to n-1 do (
    	for j from 0 to n-1 do (
    	    for k from 0 to n-1 do (
		use R;
		if(i == j and i == k) then continue;
		eqn = sum(apply(n, a -> sum(apply(n, b -> sum(apply(n, c -> L_(a,i)*L_(b,j)*L_(c,k)*t_(toSequence sort{a,b,c})))))));		
		equationList = append(equationList, eqn);
		);
    	    );
	);
   lpar=l_idpar;
   I = ideal(equationList);
   ll=delete(lpar,toList(l_(0,0)..l_(n-1,n-1)));

   elist2 = flatten for i from 0 to  hidnodes list for j from i to (n-1) list (i,j);
   elist3 = flatten flatten for i from 0 to hidnodes list for j from i to (n-1) list for k from j to (n-1) list (i,j,k);

   ll = append(ll,apply(elist2,i->s_i));
   ll = append(ll,apply(elist3,i->t_i));   
  
   ll = flatten ll;
   for i from 0 to (#elist2-1) do  list2 = delete(elist2#i,list2);
   for i from 0 to (#elist3-1) do  list3 = delete(elist3#i,list3);
    

   J = eliminate(ll, I);
   R1=QQ[lpar, apply(list2,i->s_i),apply(list3,i->t_i),MonomialOrder=> Lex];
   J=substitute(J,R1);
   return(J);
);


-- Non id-graph
n = 4;
k=3;
edges={(0,1),(0,2),(0,3),(2,3)};
idpar=(3,2);
hidnodes = 0;

I = paramoment(n,k,edges,idpar,hidnodes);

Gens = gens gb I

gendid= Gens_(0,28)
---IV 
n = 4;
k=3;
edges={(0,2),(0,3),(1,2),(2,3)};
idpar=(2,3);
hidnodes = 0;

I = paramoment(n,k,edges,idpar,hidnodes);

Gens = gens gb I

Gens_(0,17)
---IV -INV
n = 6;
k= 4;
edges={(0, 3), (0, 5), (1, 4), (1, 5), (2,3), (2, 4), (3, 5), (4, 5)};
idpar=(3,5);
hidnodes = 1;

I = paramoment(n,k,edges,idpar,hidnodes);

Gens = gens gb I




-- DID graph
ndid = 4;
kdid=3;
edgesdid={(0,1),(0,2),(0,3),(1,2),(2,3)};
idpardid=(2,3);
hidnodesdid = 0;

Idid = paramoment(ndid,kdid,edgesdid,idpardid,hidnodesdid);

Gensdid = gens gb Idid;

gendid= Gensdid_(0,109)

-- Panel Data

n = 7;
k=3;
edges={(0,1),(0,2),(0,4),(0,6),(1,3),(1,5),(2,3),(4,5),(6,2),(6,3)};
idpar=(6,3);
hidnodes = 1;

Ipd = paramoment(npd,kpd,edgespd,idparpd,hidnodespd);

gens gb J

--- Identification from Samples

sampparamoment = (n, k, edges, idpar,hidnodes) -> (
    list2 = flatten for i to n-1 list for j from i to n-1 list (i,j);
    list3 = flatten flatten for i to n-1 list for j from i to n-1 list for k from j to n-1 list (i,j,k);
    R = QQ[l_(0,0)..l_(n-1,n-1), apply(list2,i->s_i),apply(list3,i->t_i)];
    
    L = mutableIdentity(R, n);
    sL = mutableIdentity(QQ, n);
    for e in edges do (
	L_e = -l_e;
	sL_e = random(QQ);
	);
    L = matrix(L);
    L =  substitute(L, R);
    sL = matrix(sL);
    use R;
    S = matrix( apply(n, i -> apply(n, j -> if (i < j) then s_(i,j) else s_(j,i))));
    
    sS = random(QQ^4,QQ^4);
    sS = sS*(transpose sS);
    
    W = (transpose L)*S*L;
    sW = (transpose sL)*sS*sL;
    
    
    equationList = flatten for i to n-1 list for j from i+1 to n-1 list W_(i,j)-sW_(i,j);
    for i from 0 to (#list3-1) do (
	st_(list3_i) = random(QQ)
	);
    
    for i from 0 to n-1 do (
    	for j from 0 to n-1 do (
    	    for k from 0 to n-1 do (
		use R;
		if(i == j and i == k) then continue;
		eqn = sum(apply(n, a -> sum(apply(n, b -> sum(apply(n, c -> L_(a,i)*L_(b,j)*L_(c,k)*t_(toSequence sort{a,b,c})-sL_(a,i)*sL_(b,j)*sL_(c,k)*st_(toSequence sort{a,b,c}) ))))));		
		equationList = append(equationList, eqn);
		);
    	    );
	);
   lpar=l_idpar;
   I = ideal(equationList);
   ll=delete(lpar,toList(l_(0,0)..l_(n-1,n-1)));

   

   ll = append(ll,apply(list2,i-> s_i));
   ll = append(ll,apply(list3,i-> t_i));
  
   ll= flatten(ll);
   
   
   J = eliminate(ll, I);
   R1=QQ[lpar, apply(list2,i->s_i),apply(list3,i->t_i),MonomialOrder=> Lex];
   J=substitute(J,R1);
   return(J);
);



----


paramoment4 = (n, k, edges, idpar,hidnodes) -> (
    list2 = flatten for i to n-1 list for j from i to n-1 list (i,j);
    list3 = flatten flatten for i to n-1 list for j from i to n-1 list for k from j to n-1 list (i,j,k);
    list4 = flatten  flatten flatten for i to n-1 list for j from i to n-1 list for k from j to n-1 list for l from k to n-1 list (i,j,k,l);

    R = QQ[l_(0,0)..l_(n-1,n-1), apply(list2,i->s_i),apply(list3,i->t_i),apply(list4,i->q_i)];
   
    L = mutableIdentity(R, n);
    for e in edges do (
	L_e = -l_e;
	);
    
    L = matrix(L);
    L =  substitute(L, R);
    use R;
    S = matrix( apply(n, i -> apply(n, j -> if (i < j) then s_(i,j) else s_(j,i))));
    W = (transpose L)*S*L;
    equationList = flatten for i to n-1 list for j from i+1 to n-1 list W_(i,j);
    for i from 0 to n-1 do (
    	for j from 0 to n-1 do (
    	    for k from 0 to n-1 do (
		use R;
		if(i == j and i == k) then continue;
		eqn = sum(apply(n, a -> sum(apply(n, b -> sum(apply(n, c -> L_(a,i)*L_(b,j)*L_(c,k)*t_(toSequence sort{a,b,c})))))));		
		equationList = append(equationList, eqn);
		);
    	    );
	);
   
   for i from 0 to n-1 do (
    	for j from 0 to n-1 do (
    	    for k from 0 to n-1 do (
		for l from 0 to n-1 do (
		    use R;
		    if(i == j and i == k and i==l) then continue;
		    eqn = sum(apply(n, a -> sum(apply(n, b -> sum(apply(n, c -> sum(apply(n, d-> L_(a,i)*L_(b,j)*L_(c,k)*L_(d,l)*q_(toSequence sort{a,b,c,d})))))))));		
		    equationList = append(equationList, eqn);		    		   
		    );
		);
    	    );
	);
    
   lpar=l_idpar;
   I = ideal(equationList);
   ll=delete(lpar,toList(l_(0,0)..l_(n-1,n-1)));

   elist2 = flatten for i from 0 to  hidnodes list for j from i to (n-1) list (i,j);
   elist3 = flatten flatten for i from 0 to hidnodes list for j from i to (n-1) list for k from j to (n-1) list (i,j,k);
   elist4 = flatten flatten flatten for i from 0 to hidnodes list for j from i to (n-1) list for k from j to (n-1) list for l from k to n-1 list (i,j,k,l);

   ll = append(ll,apply(elist2,i->s_i));
   ll = append(ll,apply(elist3,i->t_i));   
   ll = append(ll,apply(elist4,i->q_i));
   
  
   ll = flatten ll;
   for i from 0 to (#elist2-1) do  list2 = delete(elist2#i,list2);
   for i from 0 to (#elist3-1) do  list3 = delete(elist3#i,list3);
   for i from 0 to (#elist4-1) do  list4 = delete(elist4#i,list4);
    

   J = eliminate(ll, I);
   R1=QQ[lpar, apply(list2,i->s_i),apply(list3,i->t_i),apply(list4,i->q_i),MonomialOrder=> Lex];
   J=substitute(J,R1);
   return(J);
);

                                                                                                                                                                                                                  stdio:90:97:(3): error: syntax error at ')'

-- 3 nodes graph
n = 3;
k=2;
edges={(0,1),(0,2),(2,1)};
idpar=();
hidnodes = 0;

I = paramoment4(n,k,edges,idpar,hidnodes);

Gens = gens gb I;

Gens_3


l_(1,2)^2t_(1,1,1)q_(1,1,1,2)-l_(1,2)^2t_(1,1,2)q_(1,1,1,1)-l_(1,2)t_(1,1,1)q_(1,1,2,2)+l_(1,2)t_(1,2,2)q_(1,1,1,1)+t_(1,1,2)q_(1,1,2,2)-t_(1,2,2)q_(1,1,1,2)


   I = ideal(equationList);
   ll=toList(l_(0,0)..l_(n-1,n-1));

   elist2 = flatten for i from 0 to  hidnodes list for j from i to (n-1) list (i,j);
   elist3 = flatten flatten for i from 0 to hidnodes list for j from i to (n-1) list for k from j to (n-1) list (i,j,k);
   elist4 = flatten flatten flatten for i from 0 to hidnodes list for j from i to (n-1) list for k from j to (n-1) list for l from k to n-1 list (i,j,k,l);

   ll = append(ll,apply(elist2,i->s_i));
   ll = append(ll,apply(elist3,i->t_i));   
   ll = append(ll,apply(elist4,i->q_i));
   
  
   ll = flatten ll;
   for i from 0 to (#elist2-1) do  list2 = delete(elist2#i,list2);
   for i from 0 to (#elist3-1) do  list3 = delete(elist3#i,list3);
   for i from 0 to (#elist4-1) do  list4 = delete(elist4#i,list4);
    

   J = eliminate(ll, I);
   R1=QQ[ apply(list2,i->s_i),apply(list3,i->t_i),apply(list4,i->q_i),MonomialOrder=> Lex];
   J=substitute(J,R1);
   return(J);

J1=substitute(J1,R1);
J1==J

J1
J
